plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

repositories {
    maven { url 'https://jitpack.io' }
}

configurations {
    gormTestCompile.extendsFrom integrationTestCompile
    gormTestRuntime.extendsFrom integrationTestRuntime
    gormTestImplementation.extendsFrom integrationTestImplementation

    mdTestCompile.extendsFrom integrationTestCompile
    mdTestRuntime.extendsFrom integrationTestRuntime
    mdTestImplementation.extendsFrom integrationTestImplementation

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

sourceSets {
    gormTest {
        groovy.srcDir file('src/gormTest/groovy')
        groovy.srcDir file('src/integrationTest/groovy/ai/stainless/micronaut/jupyter/kernel')
        groovy.exclude { FileTreeElement elem ->
            elem.file.absolutePath.contains ('src/integrationTest/groovy') &&
                !elem.file.absolutePath.contains('KernelSpec.groovy')
        }
        resources.srcDir file('src/test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }

    mdTest {
        groovy.srcDir file('src/mdTest/groovy')
        groovy.srcDir file('src/integrationTest/groovy/ai/stainless/micronaut/jupyter/kernel')
        groovy.exclude { FileTreeElement elem ->
            elem.file.absolutePath.contains ('src/integrationTest/groovy') &&
                !elem.file.absolutePath.contains('KernelSpec.groovy')
        }
        resources.srcDir file('src/test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }

    integrationTest {
        groovy.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"

    implementation "io.micronaut:micronaut-inject-groovy:$micronautVersion"
    annotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
    implementation "io.micronaut:micronaut-messaging:$micronautVersion"
    implementation "io.micronaut:micronaut-inject:$micronautVersion"
    implementation "io.micronaut:micronaut-management:$micronautVersion"

    compile "com.github.twosigma.beakerx:beaker-kernel-base:$beakerxVersion"
    compile "com.github.twosigma.beakerx:beaker-kernel-groovy:$beakerxVersion"

    testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"

    // Use the awesome Spock testing and specification framework
    testImplementation "org.spockframework:spock-core:$spockVersion"

    testImplementation "io.micronaut.test:micronaut-test-core:$micronautTestVersion"
    testImplementation "io.micronaut.test:micronaut-test-spock:$micronautTestVersion"
    testImplementation "io.micronaut.test:micronaut-test-junit5:$micronautTestVersion"
    testImplementation "io.micronaut:micronaut-inject-groovy:$micronautVersion"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
    testImplementation "io.micronaut:micronaut-http-server-netty:$micronautVersion"
    testImplementation "io.micronaut:micronaut-http-client:$micronautVersion"
    testImplementation "org.objenesis:objenesis:1.4"
    testImplementation "ch.qos.logback:logback-classic:1.2.3"

    integrationTestImplementation "org.testcontainers:spock:1.12.3"

    mdTestImplementation "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"
    mdTestImplementation "io.micronaut.configuration:micronaut-jdbc-tomcat:1.2.3"
    mdTestImplementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion"
    mdTestRuntime "com.h2database:h2:1.4.200"

    gormTestImplementation "io.micronaut.configuration:micronaut-hibernate-gorm:1.1.1"
    gormTestImplementation "io.micronaut.configuration:micronaut-jdbc-tomcat:1.2.3"
    // For some reason, the gorm tests would fail with a NullPointerException
    // if this dependency wasn't included
    // There must be some sort of transitive dependency that the gorm tests
    // need
    gormTestImplementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion", {
        exclude group:'io.micronaut.configuration', module:'micronaut-hibernate-jpa-spring'
    }
    gormTestRuntime "com.h2database:h2:1.4.200"
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
    }
    failFast = false
}

task gormTest(type: Test) {
    testClassesDirs = sourceSets.gormTest.output.classesDirs
    classpath = sourceSets.gormTest.runtimeClasspath
}

task mdTest(type: Test) {
    testClassesDirs = sourceSets.mdTest.output.classesDirs
    classpath = sourceSets.mdTest.runtimeClasspath
}

task unitTest(type: Test) {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    dependsOn gormTest
    dependsOn mdTest
}
/*
task test(type: Test, overwrite: true) {
    dependsOn unitTest
    dependsOn integrationTest
}

 */
test.dependsOn unitTest
test.dependsOn integrationTest

publishing {
    publications {
        jupyterConfigurationLibrary(MavenPublication) {
            artifactId = 'micronaut-jupyter'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = artifactId
                description = projectDesc
                url = projectUrl
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = "Joshua Carter"
                        email = "jcarter@stainless.ai"
                        organization = "Stainless.Ai"
                        organizationUrl = "http://www.stainless.ai"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/${githubSlug}.git"
                    developerConnection = "scm:git:ssh://github.com:${githubSlug}.git"
                    url = "http://github.com/${githubSlug}/tree/$githubBranch"
                }
            }
        }
    }
}

signing {
    sign publishing.publications.jupyterConfigurationLibrary
}
