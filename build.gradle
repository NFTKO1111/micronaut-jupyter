plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

group "ai.stainless"
version projectVersion

dependencies {
    // Use the latest Groovy version for building this library
    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"

    // Use the awesome Spock testing and specification framework
    testImplementation "org.spockframework:spock-core:$spockVersion"
}

subprojects { Project subproject ->

    group "ai.stainless"
    version project.projectVersion

    repositories {
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://repo.grails.org/grails/core" }
    }

    apply plugin: "groovy"
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    jar {
        manifest {
            attributes('Automatic-Module-Name': "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes('Implementation-Version':project.projectVersion)
            attributes('Implementation-Title': 'Micronaut Jupyter')
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    tasks.withType(Test) {
        jvmArgs '-Duser.country=US'
        jvmArgs '-Duser.language=en'
        testLogging {
            exceptionFormat = 'full'
        }
        afterSuite {
            System.out.print(".")
            System.out.flush()
        }

        reports.html.enabled = true
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    publishing {
        repositories {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?:
                project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?:
                project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''

            maven {
                name = "mavenCentral"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = ossUser
                    password = ossPass
                }
            }

            maven {
                name = "mavenCentralSnapshots"
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username = ossUser
                    password = ossPass
                }
            }
        }
    }

    signing {
        /*
         * To create this file, run:
         * ```
         * $ gpg --armor --export-secret-key SHORT_ID >> SIGNING_GPG_KEY
         * ```
         * Replace `SHORT_ID` with the id of your key (or the email associated with the key).
         * DO NOT COMMIT THIS FILE TO GIT! (Use `travis encrypt-file` instead.)
         */
        String signingKey = new File("$rootProject.projectDir/SIGNING_GPG_KEY").text
        def signingPassword = System.getenv("SIGNING_GPG_PASSWORD") ?:
            findProperty("signingPassword") ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
    }

    task allDeps(type: DependencyReportTask) {}

}

task rsync {
    // define rsync command
    def rsyncCommand = "$rootProject.projectDir/rsync"
    // attempt to run command
    try {
        def p = "$rsyncCommand".execute()
        p.waitFor()
        println "Ran local rsync"
    }
    catch (e) {
        // ignore any errors, like the command not existing
    }
}

build.dependsOn rsync
